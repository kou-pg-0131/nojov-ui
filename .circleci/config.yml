version: 2.1

orbs:
  slack: circleci/slack@3.4.2

executors:
  node:
    docker:
      - image: node:12.18.2

  terraform:
    docker:
      - image: hashicorp/terraform:0.12.24
        environment:
          TF_LOG: trace
          TF_LOG_PATH: terraform.log

commands:
  setup_aws_credentials:
    steps:
      - run:
          name: create aws credentials and config
          command: |
            mkdir -p ~/.aws
            echo '[default]'                                       > ~/.aws/credentials
            echo "aws_access_key_id=${AWS_ACCESS_KEY_ID}"         >> ~/.aws/credentials
            echo "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo '[default]'           > ~/.aws/config
            echo "region = us-east-1" >> ~/.aws/config

  yarn_install:
    steps:
      - restore_cache:
          key: v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: yarn install
          command: yarn install --check-files
      - save_cache:
          key: v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules

  terraform:
    parameters:
      stage:
        type: string
      command:
        type: string
    steps:
      - run:
          name: terraform init - << parameters.stage >>
          command: |
            cd ~/project/terraform/envs/<< parameters.stage >>
            terraform init
      - run:
          name: terraform << parameters.command >> - << parameters.stage >>
          command: |
            cd ~/project/terraform/envs/<< parameters.stage >>
            terraform << parameters.command >>
      - store_artifacts:
          path: terraform/envs/<< parameters.stage >>/terraform.log

jobs:
  test:
    executor: node
    steps:
      - checkout
      - yarn_install
      - run:
          name: eslint
          command: yarn run eslint './src/**/*.ts' './src/**/*.tsx'
      # - run:
      #     name: test
      #     command: yarn run test
      - run:
          name: build
          command: yarn run build
      - slack/status

  deploy:
    executor: node
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - setup_aws_credentials
      - run:
          name: install aws-cli
          command: |
            curl https://bootstrap.pypa.io/get-pip.py | python3
            pip install awscli==1.18.46
      - yarn_install
      - run:
          name: create dotenv
          command: |
            case << parameters.stage >> in
              dev)
                API_ORIGIN=https://dev.api.nojov.kou-pg.com
              ;;
              prod)
                API_ORIGIN=https://api.nojov.kou-pg.com
              ;;
              *)
                echo 'invalid stage!: << parameters.stage >>'
                exit 1
            esac

            echo "REACT_APP_STAGE=<< parameters.stage >>"  > .env
            echo "REACT_APP_API_ORIGIN=${API_ORIGIN}"     >> .env
            echo "REACT_APP_GA_ID=${GOOGLE_ANALYTICS_ID}" >> .env
      - run:
          name: build
          command: yarn run build
      - run:
          name: deploy
          command: aws s3 sync ./build/ s3://nojov-ui-<< parameters.stage >>-deployment/ --delete
      - slack/status

  tf_plan:
    executor: terraform
    steps:
      - checkout
      - run:
          name: install required commands
          command: apk --update add bash curl
      - setup_aws_credentials
      - terraform:
          stage: dev
          command: plan
      - slack/status

  tf_apply:
    executor: terraform
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - run:
          name: install required command
          command: apk --update add bash curl
      - setup_aws_credentials
      - terraform:
          stage: << parameters.stage >>
          command: apply -auto-approve
      - slack/status

workflows:
  build:
    jobs:
      - test
      - tf_plan

      - slack/approval-notification:
          requires: [test, tf_plan]
      - approval_deploy:
          type: approval
          requires: [test, tf_plan]

      #
      # dev
      #

      - tf_apply:
          name: tf_apply_dev
          stage: dev
          requires: [approval_deploy]
      - deploy:
          name: deploy_dev
          stage: dev
          requires: [tf_apply_dev]

      #
      # prod
      #

      - tf_apply:
          name: tf_apply_prod
          stage: prod
          requires: [approval_deploy]
          filters:
            branches:
              only: [main]
      - deploy:
          name: deploy_prod
          stage: prod
          requires: [tf_apply_prod]
          filters:
            branches:
              only: [main]
